
master324P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000336  000003ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000336  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  00800100  00800100  000003ca  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000003ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000420  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a8f  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084e  00000000  00000000  00000f17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042c  00000000  00000000  00001765  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00001b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ff  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000382  00000000  00000000  0000222f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000025b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_20>
  54:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_21>
  58:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__vector_22>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__vector_28>
  74:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_29>
  78:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_30>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a7 32       	cpi	r26, 0x27	; 39
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 8b 01 	call	0x316	; 0x316 <main>
  9c:	0c 94 99 01 	jmp	0x332	; 0x332 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <WriteBufOut>:
	WriteBufOut(Temporary); 
}
//--------------------------------------------------------------------------------------------------------------------------------
void WriteBufOut(unsigned char value) 
{
BufOut[EndBufOut++] = value;
  a4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <EndBufOut>
  a8:	e9 2f       	mov	r30, r25
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	e9 5f       	subi	r30, 0xF9	; 249
  ae:	fe 4f       	sbci	r31, 0xFE	; 254
  b0:	80 83       	st	Z, r24
  b2:	9f 5f       	subi	r25, 0xFF	; 255
    EndBufOut &= BUF_MASK;
  b4:	9f 70       	andi	r25, 0x0F	; 15
  b6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <EndBufOut>
    cli();
  ba:	f8 94       	cli
    if(WaitRead == 0) UCSR1B |= 1<<UDRIE1;    sei();
  bc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <WaitRead>
  c0:	81 11       	cpse	r24, r1
  c2:	05 c0       	rjmp	.+10     	; 0xce <WriteBufOut+0x2a>
  c4:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
  c8:	80 62       	ori	r24, 0x20	; 32
  ca:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
  ce:	78 94       	sei
}
  d0:	08 95       	ret

000000d2 <__vector_20>:
{ 
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	3f 93       	push	r19
  e0:	4f 93       	push	r20
  e2:	5f 93       	push	r21
  e4:	6f 93       	push	r22
  e6:	7f 93       	push	r23
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
  ec:	af 93       	push	r26
  ee:	bf 93       	push	r27
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
	unsigned char Temporary=UDR0;
  f4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	WriteBufOut(Temporary); 
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 52 00 	call	0xa4	; 0xa4 <WriteBufOut>
}
  fe:	ff 91       	pop	r31
 100:	ef 91       	pop	r30
 102:	bf 91       	pop	r27
 104:	af 91       	pop	r26
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	7f 91       	pop	r23
 10c:	6f 91       	pop	r22
 10e:	5f 91       	pop	r21
 110:	4f 91       	pop	r20
 112:	3f 91       	pop	r19
 114:	2f 91       	pop	r18
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <__vector_29>:
//--------------------------------------------------------------------------------------------------------------------------------
ISR(USART1_UDRE_vect) 
{
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
	PORTD |= 1<<PD2; 
 132:	5a 9a       	sbi	0x0b, 2	; 11
    UCSR1B |= 1<<TXB81; 
 134:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    asm("nop");
 13e:	00 00       	nop
    UDR1 = BufOut[StartBufOut++]; 
 140:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <StartBufOut>
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	8e 0f       	add	r24, r30
 148:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <StartBufOut>
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	e9 5f       	subi	r30, 0xF9	; 249
 150:	fe 4f       	sbci	r31, 0xFE	; 254
 152:	80 81       	ld	r24, Z
 154:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    StartBufOut &= BUF_MASK;
 158:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <StartBufOut>
 15c:	8f 70       	andi	r24, 0x0F	; 15
 15e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <StartBufOut>
    if(StartBufOut == EndBufOut || WaitRead == 1) UCSR1B &= ~(1<<UDRIE1); 
 162:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <EndBufOut>
 166:	89 17       	cp	r24, r25
 168:	21 f0       	breq	.+8      	; 0x172 <__vector_29+0x52>
 16a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <WaitRead>
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	29 f4       	brne	.+10     	; 0x17c <__vector_29+0x5c>
 172:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 176:	8f 7d       	andi	r24, 0xDF	; 223
 178:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
}
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <__vector_30>:
//--------------------------------------------------------------------------------------------------------------------------------
ISR(USART1_TX_vect) 
{ PORTD &= ~(1<<PD2); } 
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	5a 98       	cbi	0x0b, 2	; 11
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <WriteBuf1Out>:
	}	
}
//--------------------------------------------------------------------------------------------------------------------------------
void WriteBuf1Out(unsigned char value) 
{
	Buf1Out[EndBuf1Out++] = value;
 1a4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <EndBuf1Out>
 1a8:	e9 2f       	mov	r30, r25
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	e9 5e       	subi	r30, 0xE9	; 233
 1ae:	fe 4f       	sbci	r31, 0xFE	; 254
 1b0:	80 83       	st	Z, r24
 1b2:	9f 5f       	subi	r25, 0xFF	; 255
    EndBuf1Out &= BUF1_MASK;
 1b4:	9f 70       	andi	r25, 0x0F	; 15
 1b6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <EndBuf1Out>
    cli();
 1ba:	f8 94       	cli
    if(WaitWrite == 0) UCSR0B |= 1<<UDRIE0; 
 1bc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <WaitWrite>
 1c0:	81 11       	cpse	r24, r1
 1c2:	05 c0       	rjmp	.+10     	; 0x1ce <WriteBuf1Out+0x2a>
 1c4:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 1c8:	80 62       	ori	r24, 0x20	; 32
 1ca:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    sei();
 1ce:	78 94       	sei
}
 1d0:	08 95       	ret

000001d2 <__vector_28>:
{ 
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	4f 93       	push	r20
 1e2:	5f 93       	push	r21
 1e4:	6f 93       	push	r22
 1e6:	7f 93       	push	r23
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
	One = UDR1;
 1f4:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	WriteBuf1Out(One); 
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <WriteBuf1Out>
	Number++;
 1fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 202:	8f 5f       	subi	r24, 0xFF	; 255
	if (Number == 4) 
 204:	84 30       	cpi	r24, 0x04	; 4
 206:	99 f0       	breq	.+38     	; 0x22e <__vector_28+0x5c>
	Number++;
 208:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 20c:	ff 91       	pop	r31
 20e:	ef 91       	pop	r30
 210:	bf 91       	pop	r27
 212:	af 91       	pop	r26
 214:	9f 91       	pop	r25
 216:	8f 91       	pop	r24
 218:	7f 91       	pop	r23
 21a:	6f 91       	pop	r22
 21c:	5f 91       	pop	r21
 21e:	4f 91       	pop	r20
 220:	3f 91       	pop	r19
 222:	2f 91       	pop	r18
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti
		Number = 0;
 22e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	    WaitRead = 0;
 232:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <WaitRead>
	    if(StartBufOut != EndBufOut) UCSR1B |= 1<<UDRIE1; 
 236:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <StartBufOut>
 23a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <EndBufOut>
 23e:	98 17       	cp	r25, r24
 240:	29 f3       	breq	.-54     	; 0x20c <__vector_28+0x3a>
 242:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 246:	80 62       	ori	r24, 0x20	; 32
 248:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
}
 24c:	df cf       	rjmp	.-66     	; 0x20c <__vector_28+0x3a>

0000024e <__vector_21>:
//--------------------------------------------------------------------------------------------------------------------------------
ISR(USART0_UDRE_vect) 
{                                                          
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
 25c:	ef 93       	push	r30
 25e:	ff 93       	push	r31
    UDR0 = Buf1Out[StartBuf1Out++];
 260:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <StartBuf1Out>
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	8e 0f       	add	r24, r30
 268:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <StartBuf1Out>
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	e9 5e       	subi	r30, 0xE9	; 233
 270:	fe 4f       	sbci	r31, 0xFE	; 254
 272:	80 81       	ld	r24, Z
 274:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	WaitWrite = 1;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <WaitWrite>
    StartBuf1Out &= BUF1_MASK;
 27e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <StartBuf1Out>
 282:	8f 70       	andi	r24, 0x0F	; 15
 284:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <StartBuf1Out>
    if(StartBuf1Out == EndBuf1Out  ||  WaitWrite == 1) UCSR0B &= ~(1<<UDRIE0); 
 288:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <EndBuf1Out>
 28c:	89 17       	cp	r24, r25
 28e:	21 f0       	breq	.+8      	; 0x298 <__vector_21+0x4a>
 290:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <WaitWrite>
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	29 f4       	brne	.+10     	; 0x2a2 <__vector_21+0x54>
 298:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 29c:	8f 7d       	andi	r24, 0xDF	; 223
 29e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
}
 2a2:	ff 91       	pop	r31
 2a4:	ef 91       	pop	r30
 2a6:	9f 91       	pop	r25
 2a8:	8f 91       	pop	r24
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <__vector_22>:
//--------------------------------------------------------------------------------------------------------------------------------
ISR(USART0_TX_vect) 
{ WaitWrite = 0; } 
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
 2be:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <WaitWrite>
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <Init>:
	{	}
}
//--------------------------------------------------------------------------------------------------------------------------------
void Init()      
{
	DDRA  = 0xFF; 
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;
 2d0:	12 b8       	out	0x02, r1	; 2
	DDRB  = 0xFF;
 2d2:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 2d4:	15 b8       	out	0x05, r1	; 5
	DDRC  = 0xFF;
 2d6:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
 2d8:	18 b8       	out	0x08, r1	; 8
    DDRD=0b11111010; 
 2da:	8a ef       	ldi	r24, 0xFA	; 250
 2dc:	8a b9       	out	0x0a, r24	; 10
	PORTD=0b00000101;
 2de:	85 e0       	ldi	r24, 0x05	; 5
 2e0:	8b b9       	out	0x0b, r24	; 11
    UBRR1L = (unsigned char)(UBRRcalc); 
 2e2:	8b e3       	ldi	r24, 0x3B	; 59
 2e4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    UBRR1H = (unsigned char)(UBRRcalc>>8);
 2e8:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    UCSR1A = 0; 
 2ec:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    UCSR1C = (1<<UCSZ11) | (1<<UCSZ10) | (1<<USBS1);    
 2f0:	9e e0       	ldi	r25, 0x0E	; 14
 2f2:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
UCSR1B = (1<<UCSZ12) | (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1) | (1<<TXCIE1); 
 2f6:	9c ed       	ldi	r25, 0xDC	; 220
 2f8:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
	UBRR0L = (unsigned char)(UBRRcalc); 
 2fc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    UBRR0H = (unsigned char)(UBRRcalc>>8); 
 300:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UCSR0A=0;
 304:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B=(1<<RXCIE0) | (1<<TXCIE0) | (1<<RXEN0) | (1<<TXEN0);
 308:	88 ed       	ldi	r24, 0xD8	; 216
 30a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 	UCSR0C=(1<<UCSZ01) | (1<<UCSZ00); 
 30e:	86 e0       	ldi	r24, 0x06	; 6
 310:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
}
 314:	08 95       	ret

00000316 <main>:
	cli();
 316:	f8 94       	cli
	Init(); 
 318:	0e 94 66 01 	call	0x2cc	; 0x2cc <Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31c:	2f ef       	ldi	r18, 0xFF	; 255
 31e:	8f e5       	ldi	r24, 0x5F	; 95
 320:	94 e5       	ldi	r25, 0x54	; 84
 322:	21 50       	subi	r18, 0x01	; 1
 324:	80 40       	sbci	r24, 0x00	; 0
 326:	90 40       	sbci	r25, 0x00	; 0
 328:	e1 f7       	brne	.-8      	; 0x322 <main+0xc>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <main+0x16>
 32c:	00 00       	nop
    sei();  
 32e:	78 94       	sei
 330:	ff cf       	rjmp	.-2      	; 0x330 <main+0x1a>

00000332 <_exit>:
 332:	f8 94       	cli

00000334 <__stop_program>:
 334:	ff cf       	rjmp	.-2      	; 0x334 <__stop_program>
