
slave16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000b8e  00000c22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800080  00800080  00000c42  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000c42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000c90  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001aea  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089b  00000000  00000000  00002802  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a2f  00000000  00000000  0000309d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000324  00000000  00000000  00003acc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d1  00000000  00000000  00003df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000131f  00000000  00000000  000043c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000056e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__vector_11>
  30:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__vector_12>
  34:	0c 94 99 04 	jmp	0x932	; 0x932 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 39       	cpi	r26, 0x92	; 146
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0b 05 	call	0xa16	; 0xa16 <main>
  8a:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <port_ini>:
#define rw1 PORTC|=0b00000010;
#define rw0 PORTC&=0b11111101;
#define ClearDisplay 0x01;
void port_ini(void)
{
	PORTB=0x00;
  92:	18 ba       	out	0x18, r1	; 24
	DDRB=0xFF;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	87 bb       	out	0x17, r24	; 23
	PORTC=0x00;
  98:	15 ba       	out	0x15, r1	; 21
	DDRC= 0xFF;
  9a:	84 bb       	out	0x14, r24	; 20
}
  9c:	08 95       	ret

0000009e <sendCommand>:

void sendCommand(unsigned char c){
	e0;
  9e:	aa 98       	cbi	0x15, 2	; 21
	PORTB=c;
  a0:	88 bb       	out	0x18, r24	; 24
}
  a2:	08 95       	ret

000000a4 <sendChar>:

void sendChar(unsigned char c){
	rs1;
  a4:	a8 9a       	sbi	0x15, 0	; 21
	PORTB=c;
  a6:	88 bb       	out	0x18, r24	; 24
	e1;
  a8:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	82 e3       	ldi	r24, 0x32	; 50
  ac:	8a 95       	dec	r24
  ae:	f1 f7       	brne	.-4      	; 0xac <sendChar+0x8>
	_delay_ms(0.15);
	e0;
  b0:	aa 98       	cbi	0x15, 2	; 21
}
  b2:	08 95       	ret

000000b4 <setpos>:

void setpos(unsigned char x, unsigned char y){
	char address;
	address = (0x40*x+y);
  b4:	82 95       	swap	r24
  b6:	88 0f       	add	r24, r24
  b8:	88 0f       	add	r24, r24
  ba:	80 7c       	andi	r24, 0xC0	; 192
	sendChar(address);
  bc:	86 0f       	add	r24, r22
  be:	0c 94 52 00 	jmp	0xa4	; 0xa4 <sendChar>

000000c2 <LCD_BF>:
	else LCD_WriteCommand(((1<<7)|(0x40+X-1)));
}

void LCD_BF()
{
	DDRB = 0x00;
  c2:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
  c4:	18 ba       	out	0x18, r1	; 24
	rs0;
  c6:	a8 98       	cbi	0x15, 0	; 21
	rw1;
  c8:	a9 9a       	sbi	0x15, 1	; 21
	do
	{
		e0;
  ca:	aa 98       	cbi	0x15, 2	; 21
		e1;
  cc:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	00 00       	nop
		_delay_us(0.15);
	}
	while(PINB&(1<<PB7));
  d0:	b7 99       	sbic	0x16, 7	; 22
  d2:	fb cf       	rjmp	.-10     	; 0xca <LCD_BF+0x8>
	e0;
  d4:	aa 98       	cbi	0x15, 2	; 21
}
  d6:	08 95       	ret

000000d8 <LCD_WriteLetter>:
void LCD_WriteLetter(unsigned char l){
  d8:	cf 93       	push	r28
  da:	c8 2f       	mov	r28, r24
	LCD_BF();
  dc:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_BF>
	rs1;
  e0:	a8 9a       	sbi	0x15, 0	; 21
	rw0;
  e2:	a9 98       	cbi	0x15, 1	; 21
	DDRB=0xff;
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	87 bb       	out	0x17, r24	; 23
	PORTB = l;
  e8:	c8 bb       	out	0x18, r28	; 24
	e1;
  ea:	aa 9a       	sbi	0x15, 2	; 21
  ec:	00 00       	nop
	e0;
  ee:	aa 98       	cbi	0x15, 2	; 21
}
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <LCD_WriteStr>:
{
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	8c 01       	movw	r16, r24
    for(int i=0; i<255; i++)
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	c0 e0       	ldi	r28, 0x00	; 0
 102:	f8 01       	movw	r30, r16
 104:	ec 0f       	add	r30, r28
 106:	fd 1f       	adc	r31, r29
        if (str[i]=='\0')
 108:	80 81       	ld	r24, Z
 10a:	88 23       	and	r24, r24
 10c:	39 f0       	breq	.+14     	; 0x11c <LCD_WriteStr+0x28>
            LCD_WriteLetter(str[i]);
 10e:	80 81       	ld	r24, Z
 110:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_WriteLetter>
    for(int i=0; i<255; i++)
 114:	21 96       	adiw	r28, 0x01	; 1
 116:	cf 3f       	cpi	r28, 0xFF	; 255
 118:	d1 05       	cpc	r29, r1
 11a:	99 f7       	brne	.-26     	; 0x102 <LCD_WriteStr+0xe>
}
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	1f 91       	pop	r17
 122:	0f 91       	pop	r16
 124:	08 95       	ret

00000126 <LCD_WriteCommand>:
void LCD_WriteCommand(unsigned char c){
 126:	cf 93       	push	r28
 128:	c8 2f       	mov	r28, r24
	LCD_BF();
 12a:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_BF>
	rs0;
 12e:	a8 98       	cbi	0x15, 0	; 21
	rw0;
 130:	a9 98       	cbi	0x15, 1	; 21
	DDRB = 0xff;
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	87 bb       	out	0x17, r24	; 23
	PORTB = c;
 136:	c8 bb       	out	0x18, r28	; 24
	e1;
 138:	aa 9a       	sbi	0x15, 2	; 21
 13a:	00 00       	nop
	e0;
 13c:	aa 98       	cbi	0x15, 2	; 21
}
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <LCD_GoToYX>:
	if(Y==1) LCD_WriteCommand(((1<<7)|(X-1)));
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	29 f4       	brne	.+10     	; 0x150 <LCD_GoToYX+0xe>
 146:	8f ef       	ldi	r24, 0xFF	; 255
	else LCD_WriteCommand(((1<<7)|(0x40+X-1)));
 148:	86 0f       	add	r24, r22
 14a:	80 68       	ori	r24, 0x80	; 128
 14c:	0c 94 93 00 	jmp	0x126	; 0x126 <LCD_WriteCommand>
 150:	8f e3       	ldi	r24, 0x3F	; 63
 152:	fa cf       	rjmp	.-12     	; 0x148 <LCD_GoToYX+0x6>

00000154 <lcd_ini>:
	__builtin_avr_delay_cycles(__ticks_dc);
 154:	8f e0       	ldi	r24, 0x0F	; 15
 156:	97 e2       	ldi	r25, 0x27	; 39
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <lcd_ini+0x4>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <lcd_ini+0xa>
 15e:	00 00       	nop

void lcd_ini(void){
	_delay_ms(40);
	rs0;
 160:	a8 98       	cbi	0x15, 0	; 21
	sendCommand(0b00111000); // ���� 8 ��, 2 ������, 5�8 �����
 162:	88 e3       	ldi	r24, 0x38	; 56
 164:	0e 94 4f 00 	call	0x9e	; 0x9e <sendCommand>
	e1;
 168:	aa 9a       	sbi	0x15, 2	; 21
	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	00 00       	nop
	_delay_us(0.15);
	e0;
 16c:	aa 98       	cbi	0x15, 2	; 21
 16e:	90 e1       	ldi	r25, 0x10	; 16
 170:	9a 95       	dec	r25
 172:	f1 f7       	brne	.-4      	; 0x170 <lcd_ini+0x1c>
 174:	00 c0       	rjmp	.+0      	; 0x176 <lcd_ini+0x22>
	_delay_us(50);
	e1;
 176:	aa 9a       	sbi	0x15, 2	; 21
 178:	00 00       	nop
	_delay_us(0.15);
	e0;
 17a:	aa 98       	cbi	0x15, 2	; 21
 17c:	80 e1       	ldi	r24, 0x10	; 16
 17e:	8a 95       	dec	r24
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_ini+0x2a>
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_ini+0x30>
	_delay_us(50);
	e1;
 184:	aa 9a       	sbi	0x15, 2	; 21
 186:	00 00       	nop
	_delay_us(0.15);
	e0;
 188:	aa 98       	cbi	0x15, 2	; 21
 18a:	90 e1       	ldi	r25, 0x10	; 16
 18c:	9a 95       	dec	r25
 18e:	f1 f7       	brne	.-4      	; 0x18c <lcd_ini+0x38>
 190:	00 c0       	rjmp	.+0      	; 0x192 <lcd_ini+0x3e>
	_delay_us(50);
	sendCommand(0b00001100); // �������� ������� (������)
 192:	8c e0       	ldi	r24, 0x0C	; 12
 194:	0e 94 4f 00 	call	0x9e	; 0x9e <sendCommand>
	e1;
 198:	aa 9a       	sbi	0x15, 2	; 21
 19a:	85 e0       	ldi	r24, 0x05	; 5
 19c:	8a 95       	dec	r24
 19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_ini+0x48>
	_delay_us(15);
	e0;
 1a0:	aa 98       	cbi	0x15, 2	; 21
 1a2:	90 e1       	ldi	r25, 0x10	; 16
 1a4:	9a 95       	dec	r25
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_ini+0x50>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_ini+0x56>
	_delay_us(50);
	sendCommand(0b00000100); // ����� ������ �� �������
 1aa:	84 e0       	ldi	r24, 0x04	; 4
 1ac:	0e 94 4f 00 	call	0x9e	; 0x9e <sendCommand>
	e1;
 1b0:	aa 9a       	sbi	0x15, 2	; 21
 1b2:	00 00       	nop
	_delay_us(0.15);
	e0;
 1b4:	aa 98       	cbi	0x15, 2	; 21
 1b6:	80 e1       	ldi	r24, 0x10	; 16
 1b8:	8a 95       	dec	r24
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <lcd_ini+0x64>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <lcd_ini+0x6a>
	_delay_us(50);
	sendCommand(0b00000001); // �������� �������
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 4f 00 	call	0x9e	; 0x9e <sendCommand>
	e1;
 1c4:	aa 9a       	sbi	0x15, 2	; 21
 1c6:	95 e0       	ldi	r25, 0x05	; 5
 1c8:	9a 95       	dec	r25
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_ini+0x74>
	_delay_us(15);
	e0;
 1cc:	aa 98       	cbi	0x15, 2	; 21
}
 1ce:	08 95       	ret

000001d0 <OneWireInit>:
    volatile unsigned char *OneWirePORT;
    unsigned char LegsNumber;
} OneWire;

void OneWireInit(OneWire OW)
{
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	00 d0       	rcall	.+0      	; 0x1d6 <OneWireInit+0x6>
 1d6:	00 d0       	rcall	.+0      	; 0x1d8 <OneWireInit+0x8>
 1d8:	00 d0       	rcall	.+0      	; 0x1da <OneWireInit+0xa>
 1da:	1f 92       	push	r1
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
 1e0:	29 83       	std	Y+1, r18	; 0x01
 1e2:	3a 83       	std	Y+2, r19	; 0x02
 1e4:	4b 83       	std	Y+3, r20	; 0x03
 1e6:	5c 83       	std	Y+4, r21	; 0x04
 1e8:	6d 83       	std	Y+5, r22	; 0x05
 1ea:	7e 83       	std	Y+6, r23	; 0x06
 1ec:	8f 83       	std	Y+7, r24	; 0x07
 1ee:	e9 81       	ldd	r30, Y+1	; 0x01
 1f0:	fa 81       	ldd	r31, Y+2	; 0x02
 1f2:	ad 81       	ldd	r26, Y+5	; 0x05
 1f4:	be 81       	ldd	r27, Y+6	; 0x06
    *OW.OneWirePORT &= ~(1<<OW.LegsNumber);
 1f6:	2c 91       	ld	r18, X
 1f8:	38 2f       	mov	r19, r24
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	01 c0       	rjmp	.+2      	; 0x202 <OneWireInit+0x32>
 200:	88 0f       	add	r24, r24
 202:	3a 95       	dec	r19
 204:	ea f7       	brpl	.-6      	; 0x200 <OneWireInit+0x30>
 206:	80 95       	com	r24
 208:	92 2f       	mov	r25, r18
 20a:	98 23       	and	r25, r24
 20c:	9c 93       	st	X, r25
    *OW.OneWireDDR &= ~(1<<OW.LegsNumber);
 20e:	90 81       	ld	r25, Z
 210:	89 23       	and	r24, r25
 212:	80 83       	st	Z, r24
 214:	80 ea       	ldi	r24, 0xA0	; 160
 216:	8a 95       	dec	r24
 218:	f1 f7       	brne	.-4      	; 0x216 <OneWireInit+0x46>
    _delay_us(480);
}
 21a:	27 96       	adiw	r28, 0x07	; 7
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	f8 94       	cli
 220:	de bf       	out	0x3e, r29	; 62
 222:	0f be       	out	0x3f, r0	; 63
 224:	cd bf       	out	0x3d, r28	; 61
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <OneWireReset>:
//--------------------------------------------------------------------------------------

unsigned char OneWireReset(OneWire OW) 
{
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	00 d0       	rcall	.+0      	; 0x232 <OneWireReset+0x6>
 232:	00 d0       	rcall	.+0      	; 0x234 <OneWireReset+0x8>
 234:	00 d0       	rcall	.+0      	; 0x236 <OneWireReset+0xa>
 236:	1f 92       	push	r1
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	29 83       	std	Y+1, r18	; 0x01
 23e:	3a 83       	std	Y+2, r19	; 0x02
 240:	4b 83       	std	Y+3, r20	; 0x03
 242:	5c 83       	std	Y+4, r21	; 0x04
 244:	6d 83       	std	Y+5, r22	; 0x05
 246:	7e 83       	std	Y+6, r23	; 0x06
 248:	8f 83       	std	Y+7, r24	; 0x07
 24a:	e9 81       	ldd	r30, Y+1	; 0x01
 24c:	fa 81       	ldd	r31, Y+2	; 0x02
    if(SREG &(1<<7)) cli();
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	07 fe       	sbrs	r0, 7
 252:	36 c0       	rjmp	.+108    	; 0x2c0 <OneWireReset+0x94>
 254:	f8 94       	cli
    else condition = 0;
    *OW.OneWireDDR |=(1<<OW.LegsNumber);
 256:	90 81       	ld	r25, Z
 258:	41 e0       	ldi	r20, 0x01	; 1
 25a:	50 e0       	ldi	r21, 0x00	; 0
 25c:	9a 01       	movw	r18, r20
 25e:	08 2e       	mov	r0, r24
 260:	01 c0       	rjmp	.+2      	; 0x264 <OneWireReset+0x38>
 262:	22 0f       	add	r18, r18
 264:	0a 94       	dec	r0
 266:	ea f7       	brpl	.-6      	; 0x262 <OneWireReset+0x36>
 268:	92 2b       	or	r25, r18
 26a:	90 83       	st	Z, r25
 26c:	90 ea       	ldi	r25, 0xA0	; 160
 26e:	9a 95       	dec	r25
 270:	f1 f7       	brne	.-4      	; 0x26e <OneWireReset+0x42>
    _delay_us(480);
    *OW.OneWireDDR &=~(1<<OW.LegsNumber);
 272:	90 81       	ld	r25, Z
 274:	20 95       	com	r18
 276:	29 23       	and	r18, r25
 278:	20 83       	st	Z, r18
 27a:	97 e1       	ldi	r25, 0x17	; 23
 27c:	9a 95       	dec	r25
 27e:	f1 f7       	brne	.-4      	; 0x27c <OneWireReset+0x50>
 280:	00 00       	nop
    _delay_us(70);

    if((*OW.OneWirePIN)&(OW.LegsNumber)) res = 0;
 282:	eb 81       	ldd	r30, Y+3	; 0x03
 284:	fc 81       	ldd	r31, Y+4	; 0x04
 286:	90 81       	ld	r25, Z
 288:	89 23       	and	r24, r25
 28a:	f9 f0       	breq	.+62     	; 0x2ca <OneWireReset+0x9e>
 28c:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <res+0x1>
 290:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <res>
 294:	88 e8       	ldi	r24, 0x88	; 136
 296:	8a 95       	dec	r24
 298:	f1 f7       	brne	.-4      	; 0x296 <OneWireReset+0x6a>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <OneWireReset+0x70>
    else res = 1;
    _delay_us(410);

    if(condition)sei();
 29c:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <condition>
 2a0:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <condition+0x1>
 2a4:	89 2b       	or	r24, r25
 2a6:	09 f0       	breq	.+2      	; 0x2aa <OneWireReset+0x7e>
 2a8:	78 94       	sei
    return res;
}
 2aa:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <res>
 2ae:	27 96       	adiw	r28, 0x07	; 7
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	f8 94       	cli
 2b4:	de bf       	out	0x3e, r29	; 62
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	cd bf       	out	0x3d, r28	; 61
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret
    else condition = 0;
 2c0:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <condition+0x1>
 2c4:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <condition>
 2c8:	c6 cf       	rjmp	.-116    	; 0x256 <OneWireReset+0x2a>
    else res = 1;
 2ca:	50 93 8d 00 	sts	0x008D, r21	; 0x80008d <res+0x1>
 2ce:	40 93 8c 00 	sts	0x008C, r20	; 0x80008c <res>
 2d2:	e0 cf       	rjmp	.-64     	; 0x294 <OneWireReset+0x68>

000002d4 <OneWireReadBit>:
//----------------------------------------------------------------------------------------
unsigned char OneWireReadBit(OneWire OW)
{
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	00 d0       	rcall	.+0      	; 0x2da <OneWireReadBit+0x6>
 2da:	00 d0       	rcall	.+0      	; 0x2dc <OneWireReadBit+0x8>
 2dc:	00 d0       	rcall	.+0      	; 0x2de <OneWireReadBit+0xa>
 2de:	1f 92       	push	r1
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
 2e4:	29 83       	std	Y+1, r18	; 0x01
 2e6:	3a 83       	std	Y+2, r19	; 0x02
 2e8:	4b 83       	std	Y+3, r20	; 0x03
 2ea:	5c 83       	std	Y+4, r21	; 0x04
 2ec:	6d 83       	std	Y+5, r22	; 0x05
 2ee:	7e 83       	std	Y+6, r23	; 0x06
 2f0:	8f 83       	std	Y+7, r24	; 0x07
 2f2:	e9 81       	ldd	r30, Y+1	; 0x01
 2f4:	fa 81       	ldd	r31, Y+2	; 0x02
    unsigned char bit =0;
    *OW.OneWireDDR |=(1<<OW.LegsNumber);
 2f6:	20 81       	ld	r18, Z
 2f8:	38 2f       	mov	r19, r24
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	03 2e       	mov	r0, r19
 300:	01 c0       	rjmp	.+2      	; 0x304 <OneWireReadBit+0x30>
 302:	88 0f       	add	r24, r24
 304:	0a 94       	dec	r0
 306:	ea f7       	brpl	.-6      	; 0x302 <OneWireReadBit+0x2e>
 308:	92 2f       	mov	r25, r18
 30a:	98 2b       	or	r25, r24
 30c:	90 83       	st	Z, r25
 30e:	22 e0       	ldi	r18, 0x02	; 2
 310:	2a 95       	dec	r18
 312:	f1 f7       	brne	.-4      	; 0x310 <OneWireReadBit+0x3c>
    _delay_us(6);

    *OW.OneWireDDR &= ~(1<<OW.LegsNumber);
 314:	90 81       	ld	r25, Z
 316:	80 95       	com	r24
 318:	89 23       	and	r24, r25
 31a:	80 83       	st	Z, r24
 31c:	83 e0       	ldi	r24, 0x03	; 3
 31e:	8a 95       	dec	r24
 320:	f1 f7       	brne	.-4      	; 0x31e <OneWireReadBit+0x4a>
    _delay_us(9);

    if((*OW.OneWirePIN)&(1<<OW.LegsNumber)) bit =1;
 322:	eb 81       	ldd	r30, Y+3	; 0x03
 324:	fc 81       	ldd	r31, Y+4	; 0x04
 326:	80 81       	ld	r24, Z
 328:	92 e1       	ldi	r25, 0x12	; 18
 32a:	9a 95       	dec	r25
 32c:	f1 f7       	brne	.-4      	; 0x32a <OneWireReadBit+0x56>
 32e:	00 00       	nop
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	02 c0       	rjmp	.+4      	; 0x338 <OneWireReadBit+0x64>
 334:	95 95       	asr	r25
 336:	87 95       	ror	r24
 338:	3a 95       	dec	r19
 33a:	e2 f7       	brpl	.-8      	; 0x334 <OneWireReadBit+0x60>
    _delay_us(55);
    return bit;
}
 33c:	81 70       	andi	r24, 0x01	; 1
 33e:	27 96       	adiw	r28, 0x07	; 7
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	f8 94       	cli
 344:	de bf       	out	0x3e, r29	; 62
 346:	0f be       	out	0x3f, r0	; 63
 348:	cd bf       	out	0x3d, r28	; 61
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <OneWireWrite1>:
//-----------------------------------------------------------------------------------------
void OneWireWrite1(OneWire OW)
{
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	00 d0       	rcall	.+0      	; 0x356 <OneWireWrite1+0x6>
 356:	00 d0       	rcall	.+0      	; 0x358 <OneWireWrite1+0x8>
 358:	00 d0       	rcall	.+0      	; 0x35a <OneWireWrite1+0xa>
 35a:	1f 92       	push	r1
 35c:	cd b7       	in	r28, 0x3d	; 61
 35e:	de b7       	in	r29, 0x3e	; 62
 360:	29 83       	std	Y+1, r18	; 0x01
 362:	3a 83       	std	Y+2, r19	; 0x02
 364:	4b 83       	std	Y+3, r20	; 0x03
 366:	5c 83       	std	Y+4, r21	; 0x04
 368:	6d 83       	std	Y+5, r22	; 0x05
 36a:	7e 83       	std	Y+6, r23	; 0x06
 36c:	8f 83       	std	Y+7, r24	; 0x07
 36e:	e9 81       	ldd	r30, Y+1	; 0x01
 370:	fa 81       	ldd	r31, Y+2	; 0x02
    *OW.OneWireDDR |= (1<<OW.LegsNumber);
 372:	20 81       	ld	r18, Z
 374:	38 2f       	mov	r19, r24
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	01 c0       	rjmp	.+2      	; 0x37e <OneWireWrite1+0x2e>
 37c:	88 0f       	add	r24, r24
 37e:	3a 95       	dec	r19
 380:	ea f7       	brpl	.-6      	; 0x37c <OneWireWrite1+0x2c>
 382:	92 2f       	mov	r25, r18
 384:	98 2b       	or	r25, r24
 386:	90 83       	st	Z, r25
 388:	22 e0       	ldi	r18, 0x02	; 2
 38a:	2a 95       	dec	r18
 38c:	f1 f7       	brne	.-4      	; 0x38a <OneWireWrite1+0x3a>
    _delay_us(6);

    *OW.OneWireDDR &= ~(1<<OW.LegsNumber);
 38e:	90 81       	ld	r25, Z
 390:	80 95       	com	r24
 392:	89 23       	and	r24, r25
 394:	80 83       	st	Z, r24
 396:	85 e1       	ldi	r24, 0x15	; 21
 398:	8a 95       	dec	r24
 39a:	f1 f7       	brne	.-4      	; 0x398 <OneWireWrite1+0x48>
 39c:	00 00       	nop
    _delay_us(64);
}
 39e:	27 96       	adiw	r28, 0x07	; 7
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	f8 94       	cli
 3a4:	de bf       	out	0x3e, r29	; 62
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	cd bf       	out	0x3d, r28	; 61
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <OneWireWrite0>:

//-------------------------------------------------------------------------------------------

void OneWireWrite0 (OneWire OW) 
{
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	00 d0       	rcall	.+0      	; 0x3b6 <OneWireWrite0+0x6>
 3b6:	00 d0       	rcall	.+0      	; 0x3b8 <OneWireWrite0+0x8>
 3b8:	00 d0       	rcall	.+0      	; 0x3ba <OneWireWrite0+0xa>
 3ba:	1f 92       	push	r1
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
 3c0:	29 83       	std	Y+1, r18	; 0x01
 3c2:	3a 83       	std	Y+2, r19	; 0x02
 3c4:	4b 83       	std	Y+3, r20	; 0x03
 3c6:	5c 83       	std	Y+4, r21	; 0x04
 3c8:	6d 83       	std	Y+5, r22	; 0x05
 3ca:	7e 83       	std	Y+6, r23	; 0x06
 3cc:	8f 83       	std	Y+7, r24	; 0x07
 3ce:	e9 81       	ldd	r30, Y+1	; 0x01
 3d0:	fa 81       	ldd	r31, Y+2	; 0x02
    *OW.OneWireDDR |= (1<<OW.LegsNumber);
 3d2:	20 81       	ld	r18, Z
 3d4:	38 2f       	mov	r19, r24
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	01 c0       	rjmp	.+2      	; 0x3de <OneWireWrite0+0x2e>
 3dc:	88 0f       	add	r24, r24
 3de:	3a 95       	dec	r19
 3e0:	ea f7       	brpl	.-6      	; 0x3dc <OneWireWrite0+0x2c>
 3e2:	92 2f       	mov	r25, r18
 3e4:	98 2b       	or	r25, r24
 3e6:	90 83       	st	Z, r25
 3e8:	24 e1       	ldi	r18, 0x14	; 20
 3ea:	2a 95       	dec	r18
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <OneWireWrite0+0x3a>
    _delay_us(60);

    *OW.OneWireDDR &= ~(1<<OW.LegsNumber);
 3ee:	90 81       	ld	r25, Z
 3f0:	80 95       	com	r24
 3f2:	89 23       	and	r24, r25
 3f4:	80 83       	st	Z, r24
}
 3f6:	27 96       	adiw	r28, 0x07	; 7
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	f8 94       	cli
 3fc:	de bf       	out	0x3e, r29	; 62
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	cd bf       	out	0x3d, r28	; 61
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	08 95       	ret

00000408 <OneWireReadByte>:
//-------------------------------------------------------------------------------------------
unsigned char OneWireReadByte(OneWire OW)
{
 408:	0f 93       	push	r16
 40a:	1f 93       	push	r17
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	00 d0       	rcall	.+0      	; 0x412 <OneWireReadByte+0xa>
 412:	00 d0       	rcall	.+0      	; 0x414 <OneWireReadByte+0xc>
 414:	00 d0       	rcall	.+0      	; 0x416 <OneWireReadByte+0xe>
 416:	1f 92       	push	r1
 418:	cd b7       	in	r28, 0x3d	; 61
 41a:	de b7       	in	r29, 0x3e	; 62
 41c:	29 83       	std	Y+1, r18	; 0x01
 41e:	3a 83       	std	Y+2, r19	; 0x02
 420:	4b 83       	std	Y+3, r20	; 0x03
 422:	5c 83       	std	Y+4, r21	; 0x04
 424:	6d 83       	std	Y+5, r22	; 0x05
 426:	7e 83       	std	Y+6, r23	; 0x06
 428:	8f 83       	std	Y+7, r24	; 0x07
    unsigned char i=8, byte = 0;
    while(i--)
 42a:	09 e0       	ldi	r16, 0x09	; 9
    unsigned char i=8, byte = 0;
 42c:	10 e0       	ldi	r17, 0x00	; 0
 42e:	01 50       	subi	r16, 0x01	; 1
    while(i--)
 430:	61 f4       	brne	.+24     	; 0x44a <OneWireReadByte+0x42>
    {
        byte >>=1;
        byte |=OneWireReadBit(OW)<<7;
    }
    return byte;
}
 432:	81 2f       	mov	r24, r17
 434:	27 96       	adiw	r28, 0x07	; 7
 436:	0f b6       	in	r0, 0x3f	; 63
 438:	f8 94       	cli
 43a:	de bf       	out	0x3e, r29	; 62
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	cd bf       	out	0x3d, r28	; 61
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	08 95       	ret
        byte |=OneWireReadBit(OW)<<7;
 44a:	29 81       	ldd	r18, Y+1	; 0x01
 44c:	3a 81       	ldd	r19, Y+2	; 0x02
 44e:	4b 81       	ldd	r20, Y+3	; 0x03
 450:	5c 81       	ldd	r21, Y+4	; 0x04
 452:	6d 81       	ldd	r22, Y+5	; 0x05
 454:	7e 81       	ldd	r23, Y+6	; 0x06
 456:	8f 81       	ldd	r24, Y+7	; 0x07
 458:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <OneWireReadBit>
 45c:	20 e8       	ldi	r18, 0x80	; 128
 45e:	82 9f       	mul	r24, r18
 460:	c0 01       	movw	r24, r0
 462:	11 24       	eor	r1, r1
        byte >>=1;
 464:	16 95       	lsr	r17
        byte |=OneWireReadBit(OW)<<7;
 466:	18 2b       	or	r17, r24
 468:	e2 cf       	rjmp	.-60     	; 0x42e <OneWireReadByte+0x26>

0000046a <OneWireWriteByte>:
//---------------------------------------------------------------------------------------------
void OneWireWriteByte(OneWire OW, unsigned char byte)
{
 46a:	0f 93       	push	r16
 46c:	1f 93       	push	r17
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	00 d0       	rcall	.+0      	; 0x474 <OneWireWriteByte+0xa>
 474:	00 d0       	rcall	.+0      	; 0x476 <OneWireWriteByte+0xc>
 476:	00 d0       	rcall	.+0      	; 0x478 <OneWireWriteByte+0xe>
 478:	1f 92       	push	r1
 47a:	cd b7       	in	r28, 0x3d	; 61
 47c:	de b7       	in	r29, 0x3e	; 62
 47e:	29 83       	std	Y+1, r18	; 0x01
 480:	3a 83       	std	Y+2, r19	; 0x02
 482:	4b 83       	std	Y+3, r20	; 0x03
 484:	5c 83       	std	Y+4, r21	; 0x04
 486:	6d 83       	std	Y+5, r22	; 0x05
 488:	7e 83       	std	Y+6, r23	; 0x06
 48a:	8f 83       	std	Y+7, r24	; 0x07
    unsigned char i = 8;
    while(i--)
 48c:	19 e0       	ldi	r17, 0x09	; 9
 48e:	11 50       	subi	r17, 0x01	; 1
 490:	59 f4       	brne	.+22     	; 0x4a8 <OneWireWriteByte+0x3e>
    {
        if(byte&1) OneWireWrite1(OW);
        else       OneWireWrite0(OW);
        byte>>=1;
    }
}
 492:	27 96       	adiw	r28, 0x07	; 7
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	f8 94       	cli
 498:	de bf       	out	0x3e, r29	; 62
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	cd bf       	out	0x3d, r28	; 61
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	1f 91       	pop	r17
 4a4:	0f 91       	pop	r16
 4a6:	08 95       	ret
        if(byte&1) OneWireWrite1(OW);
 4a8:	29 81       	ldd	r18, Y+1	; 0x01
 4aa:	3a 81       	ldd	r19, Y+2	; 0x02
 4ac:	4b 81       	ldd	r20, Y+3	; 0x03
 4ae:	5c 81       	ldd	r21, Y+4	; 0x04
 4b0:	6d 81       	ldd	r22, Y+5	; 0x05
 4b2:	7e 81       	ldd	r23, Y+6	; 0x06
 4b4:	8f 81       	ldd	r24, Y+7	; 0x07
 4b6:	00 ff       	sbrs	r16, 0
 4b8:	04 c0       	rjmp	.+8      	; 0x4c2 <OneWireWriteByte+0x58>
 4ba:	0e 94 a8 01 	call	0x350	; 0x350 <OneWireWrite1>
        byte>>=1;
 4be:	06 95       	lsr	r16
 4c0:	e6 cf       	rjmp	.-52     	; 0x48e <OneWireWriteByte+0x24>
        else       OneWireWrite0(OW);
 4c2:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <OneWireWrite0>
 4c6:	fb cf       	rjmp	.-10     	; 0x4be <OneWireWriteByte+0x54>

000004c8 <__vector_6>:
char time=0, address = 125, u=0, k=8;
unsigned char  BufferOUT[BUF_SIZE],  StartBufOUT = 0, EndBufOUT = 0, Memory[4];
volatile unsigned char  waitread = 0, write = 0;

ISR(TIMER1_COMPA_vect)
{
 4c8:	1f 92       	push	r1
 4ca:	0f 92       	push	r0
 4cc:	0f b6       	in	r0, 0x3f	; 63
 4ce:	0f 92       	push	r0
 4d0:	11 24       	eor	r1, r1
 4d2:	ff 92       	push	r15
 4d4:	0f 93       	push	r16
 4d6:	1f 93       	push	r17
 4d8:	2f 93       	push	r18
 4da:	3f 93       	push	r19
 4dc:	4f 93       	push	r20
 4de:	5f 93       	push	r21
 4e0:	6f 93       	push	r22
 4e2:	7f 93       	push	r23
 4e4:	8f 93       	push	r24
 4e6:	9f 93       	push	r25
 4e8:	af 93       	push	r26
 4ea:	bf 93       	push	r27
 4ec:	ef 93       	push	r30
 4ee:	ff 93       	push	r31
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	00 d0       	rcall	.+0      	; 0x4f6 <__vector_6+0x2e>
 4f6:	00 d0       	rcall	.+0      	; 0x4f8 <__vector_6+0x30>
 4f8:	cd b7       	in	r28, 0x3d	; 61
 4fa:	de b7       	in	r29, 0x3e	; 62
unsigned int tempHB, tempLB,temp;
unsigned char tempDigital,tempDecimal, minus = 0;
char Sbuf[4];
LCD_WriteCommand (0x01); // clear LCD memory
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	0e 94 93 00 	call	0x126	; 0x126 <LCD_WriteCommand>
	__builtin_avr_delay_cycles(__ticks_dc);
 502:	83 ec       	ldi	r24, 0xC3	; 195
 504:	99 e0       	ldi	r25, 0x09	; 9
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	f1 f7       	brne	.-4      	; 0x506 <__vector_6+0x3e>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <__vector_6+0x44>
 50c:	00 00       	nop
_delay_ms (10);


if(OneWireReset(OW1))
 50e:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <OW1>
 512:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <OW1+0x1>
 516:	40 91 6b 00 	lds	r20, 0x006B	; 0x80006b <OW1+0x2>
 51a:	50 91 6c 00 	lds	r21, 0x006C	; 0x80006c <OW1+0x3>
 51e:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <OW1+0x4>
 522:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <OW1+0x5>
 526:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <OW1+0x6>
 52a:	0e 94 16 01 	call	0x22c	; 0x22c <OneWireReset>
 52e:	88 23       	and	r24, r24
 530:	09 f4       	brne	.+2      	; 0x534 <__vector_6+0x6c>
 532:	86 c0       	rjmp	.+268    	; 0x640 <__vector_6+0x178>
{ 
OneWireWriteByte(OW1, SKIP_ROM);
 534:	0c ec       	ldi	r16, 0xCC	; 204
 536:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <OW1>
 53a:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <OW1+0x1>
 53e:	40 91 6b 00 	lds	r20, 0x006B	; 0x80006b <OW1+0x2>
 542:	50 91 6c 00 	lds	r21, 0x006C	; 0x80006c <OW1+0x3>
 546:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <OW1+0x4>
 54a:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <OW1+0x5>
 54e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <OW1+0x6>
 552:	0e 94 35 02 	call	0x46a	; 0x46a <OneWireWriteByte>
OneWireWriteByte(OW1, READ_SCRATCHPAD);
 556:	0e eb       	ldi	r16, 0xBE	; 190
 558:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <OW1>
 55c:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <OW1+0x1>
 560:	40 91 6b 00 	lds	r20, 0x006B	; 0x80006b <OW1+0x2>
 564:	50 91 6c 00 	lds	r21, 0x006C	; 0x80006c <OW1+0x3>
 568:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <OW1+0x4>
 56c:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <OW1+0x5>
 570:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <OW1+0x6>
 574:	0e 94 35 02 	call	0x46a	; 0x46a <OneWireWriteByte>

tempLB = (unsigned int)OneWireReadByte(OW1);
 578:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <OW1>
 57c:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <OW1+0x1>
 580:	40 91 6b 00 	lds	r20, 0x006B	; 0x80006b <OW1+0x2>
 584:	50 91 6c 00 	lds	r21, 0x006C	; 0x80006c <OW1+0x3>
 588:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <OW1+0x4>
 58c:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <OW1+0x5>
 590:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <OW1+0x6>
 594:	0e 94 04 02 	call	0x408	; 0x408 <OneWireReadByte>
 598:	08 2f       	mov	r16, r24
tempHB = (unsigned int)OneWireReadByte(OW1);
 59a:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <OW1>
 59e:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <OW1+0x1>
 5a2:	40 91 6b 00 	lds	r20, 0x006B	; 0x80006b <OW1+0x2>
 5a6:	50 91 6c 00 	lds	r21, 0x006C	; 0x80006c <OW1+0x3>
 5aa:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <OW1+0x4>
 5ae:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <OW1+0x5>
 5b2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <OW1+0x6>
 5b6:	0e 94 04 02 	call	0x408	; 0x408 <OneWireReadByte>
Memory[0]=(unsigned char) tempLB;
 5ba:	00 93 88 00 	sts	0x0088, r16	; 0x800088 <Memory>
Memory[1]=(unsigned char) tempHB;
 5be:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <Memory+0x1>

temp = (tempLB)|(tempHB<<8);
 5c2:	18 2f       	mov	r17, r24
unsigned char tempDigital,tempDecimal, minus = 0;
 5c4:	f1 2c       	mov	r15, r1
if(temp&0x8000)
 5c6:	17 ff       	sbrs	r17, 7
 5c8:	05 c0       	rjmp	.+10     	; 0x5d4 <__vector_6+0x10c>
{
temp = ~temp + 1;
 5ca:	11 95       	neg	r17
 5cc:	01 95       	neg	r16
 5ce:	11 09       	sbc	r17, r1
minus = 1;
 5d0:	ff 24       	eor	r15, r15
 5d2:	f3 94       	inc	r15
	else LCD_WriteCommand(((1<<7)|(0x40+X-1)));
 5d4:	80 ec       	ldi	r24, 0xC0	; 192
 5d6:	0e 94 93 00 	call	0x126	; 0x126 <LCD_WriteCommand>
}
LCD_GoToYX(0, 1);
if(minus) LCD_WriteLetter('-');
 5da:	8d e2       	ldi	r24, 0x2D	; 45
 5dc:	f1 10       	cpse	r15, r1
 5de:	01 c0       	rjmp	.+2      	; 0x5e2 <__vector_6+0x11a>
else LCD_WriteLetter('+');
 5e0:	8b e2       	ldi	r24, 0x2B	; 43
 5e2:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_WriteLetter>
tempDigital = temp >> 4;
tempDecimal = temp & 0xF;
 5e6:	80 2f       	mov	r24, r16
 5e8:	8f 70       	andi	r24, 0x0F	; 15
tempDecimal = (tempDecimal<<1) + (tempDecimal<<3);
 5ea:	f8 2e       	mov	r15, r24
 5ec:	ff 0c       	add	r15, r15
 5ee:	88 0f       	add	r24, r24
 5f0:	88 0f       	add	r24, r24
 5f2:	88 0f       	add	r24, r24
 5f4:	f8 0e       	add	r15, r24
tempDigital = temp >> 4;
 5f6:	24 e0       	ldi	r18, 0x04	; 4
 5f8:	16 95       	lsr	r17
 5fa:	07 95       	ror	r16
 5fc:	2a 95       	dec	r18
 5fe:	e1 f7       	brne	.-8      	; 0x5f8 <__vector_6+0x130>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 600:	4a e0       	ldi	r20, 0x0A	; 10
 602:	be 01       	movw	r22, r28
 604:	6f 5f       	subi	r22, 0xFF	; 255
 606:	7f 4f       	sbci	r23, 0xFF	; 255
 608:	80 2f       	mov	r24, r16
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	0e 94 9b 05 	call	0xb36	; 0xb36 <__utoa_ncheck>
tempDecimal = (tempDecimal>>4);
LCD_WriteStr( utoa(tempDigital,Sbuf,10) );
 610:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_WriteStr>
LCD_WriteLetter('.');
 614:	8e e2       	ldi	r24, 0x2E	; 46
 616:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_WriteLetter>
tempDecimal = (tempDecimal>>4);
 61a:	f2 94       	swap	r15
 61c:	3f e0       	ldi	r19, 0x0F	; 15
 61e:	f3 22       	and	r15, r19
 620:	4a e0       	ldi	r20, 0x0A	; 10
 622:	be 01       	movw	r22, r28
 624:	6f 5f       	subi	r22, 0xFF	; 255
 626:	7f 4f       	sbci	r23, 0xFF	; 255
 628:	8f 2d       	mov	r24, r15
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0e 94 9b 05 	call	0xb36	; 0xb36 <__utoa_ncheck>
LCD_WriteStr( utoa(tempDecimal,Sbuf,10) );
 630:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_WriteStr>
LCD_WriteLetter('*');
 634:	8a e2       	ldi	r24, 0x2A	; 42
 636:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_WriteLetter>
LCD_WriteLetter('C');
 63a:	83 e4       	ldi	r24, 0x43	; 67
 63c:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_WriteLetter>


}
if(OneWireReset(OW1) ) 
 640:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <OW1>
 644:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <OW1+0x1>
 648:	40 91 6b 00 	lds	r20, 0x006B	; 0x80006b <OW1+0x2>
 64c:	50 91 6c 00 	lds	r21, 0x006C	; 0x80006c <OW1+0x3>
 650:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <OW1+0x4>
 654:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <OW1+0x5>
 658:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <OW1+0x6>
 65c:	0e 94 16 01 	call	0x22c	; 0x22c <OneWireReset>
 660:	88 23       	and	r24, r24
 662:	09 f4       	brne	.+2      	; 0x666 <__vector_6+0x19e>
 664:	0a c1       	rjmp	.+532    	; 0x87a <__vector_6+0x3b2>
{

OneWireWriteByte(OW1, SKIP_ROM);
 666:	0c ec       	ldi	r16, 0xCC	; 204
 668:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <OW1>
 66c:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <OW1+0x1>
 670:	40 91 6b 00 	lds	r20, 0x006B	; 0x80006b <OW1+0x2>
 674:	50 91 6c 00 	lds	r21, 0x006C	; 0x80006c <OW1+0x3>
 678:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <OW1+0x4>
 67c:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <OW1+0x5>
 680:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <OW1+0x6>
 684:	0e 94 35 02 	call	0x46a	; 0x46a <OneWireWriteByte>

OneWireWriteByte(OW1, CONVERT_TEMP);
 688:	04 e4       	ldi	r16, 0x44	; 68
 68a:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <OW1>
 68e:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <OW1+0x1>
 692:	40 91 6b 00 	lds	r20, 0x006B	; 0x80006b <OW1+0x2>
 696:	50 91 6c 00 	lds	r21, 0x006C	; 0x80006c <OW1+0x3>
 69a:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <OW1+0x4>
 69e:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <OW1+0x5>
 6a2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <OW1+0x6>
 6a6:	0e 94 35 02 	call	0x46a	; 0x46a <OneWireWriteByte>
}


minus = 0;

if(OneWireReset(OW2))
 6aa:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <OW2>
 6ae:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <OW2+0x1>
 6b2:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <OW2+0x2>
 6b6:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <OW2+0x3>
 6ba:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <OW2+0x4>
 6be:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <OW2+0x5>
 6c2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <OW2+0x6>
 6c6:	0e 94 16 01 	call	0x22c	; 0x22c <OneWireReset>
 6ca:	88 23       	and	r24, r24
 6cc:	09 f4       	brne	.+2      	; 0x6d0 <__vector_6+0x208>
 6ce:	86 c0       	rjmp	.+268    	; 0x7dc <__vector_6+0x314>
{ 
OneWireWriteByte(OW2, SKIP_ROM);
 6d0:	0c ec       	ldi	r16, 0xCC	; 204
 6d2:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <OW2>
 6d6:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <OW2+0x1>
 6da:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <OW2+0x2>
 6de:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <OW2+0x3>
 6e2:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <OW2+0x4>
 6e6:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <OW2+0x5>
 6ea:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <OW2+0x6>
 6ee:	0e 94 35 02 	call	0x46a	; 0x46a <OneWireWriteByte>
OneWireWriteByte(OW2, READ_SCRATCHPAD);
 6f2:	0e eb       	ldi	r16, 0xBE	; 190
 6f4:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <OW2>
 6f8:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <OW2+0x1>
 6fc:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <OW2+0x2>
 700:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <OW2+0x3>
 704:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <OW2+0x4>
 708:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <OW2+0x5>
 70c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <OW2+0x6>
 710:	0e 94 35 02 	call	0x46a	; 0x46a <OneWireWriteByte>
tempLB = (unsigned int)OneWireReadByte(OW2);
 714:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <OW2>
 718:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <OW2+0x1>
 71c:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <OW2+0x2>
 720:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <OW2+0x3>
 724:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <OW2+0x4>
 728:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <OW2+0x5>
 72c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <OW2+0x6>
 730:	0e 94 04 02 	call	0x408	; 0x408 <OneWireReadByte>
 734:	08 2f       	mov	r16, r24
tempHB = (unsigned int)OneWireReadByte(OW2);
 736:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <OW2>
 73a:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <OW2+0x1>
 73e:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <OW2+0x2>
 742:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <OW2+0x3>
 746:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <OW2+0x4>
 74a:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <OW2+0x5>
 74e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <OW2+0x6>
 752:	0e 94 04 02 	call	0x408	; 0x408 <OneWireReadByte>
Memory[2]=(unsigned char) tempLB;
 756:	00 93 8a 00 	sts	0x008A, r16	; 0x80008a <Memory+0x2>
Memory[3]=(unsigned char) tempHB;
 75a:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <Memory+0x3>
temp = (tempLB)|(tempHB<<8);
 75e:	18 2f       	mov	r17, r24
minus = 0;
 760:	f1 2c       	mov	r15, r1
if(temp&0x8000)
 762:	17 ff       	sbrs	r17, 7
 764:	05 c0       	rjmp	.+10     	; 0x770 <__vector_6+0x2a8>
{
temp = ~temp + 1;
 766:	11 95       	neg	r17
 768:	01 95       	neg	r16
 76a:	11 09       	sbc	r17, r1
minus = 1;
 76c:	ff 24       	eor	r15, r15
 76e:	f3 94       	inc	r15
	if(Y==1) LCD_WriteCommand(((1<<7)|(X-1)));
 770:	80 e8       	ldi	r24, 0x80	; 128
 772:	0e 94 93 00 	call	0x126	; 0x126 <LCD_WriteCommand>
}
LCD_GoToYX(1, 1);
if(minus) LCD_WriteLetter('-');
 776:	8d e2       	ldi	r24, 0x2D	; 45
 778:	f1 10       	cpse	r15, r1
 77a:	01 c0       	rjmp	.+2      	; 0x77e <__vector_6+0x2b6>
else LCD_WriteLetter('+');
 77c:	8b e2       	ldi	r24, 0x2B	; 43
 77e:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_WriteLetter>
tempDigital = temp >> 4;
tempDecimal = temp & 0xF;
 782:	80 2f       	mov	r24, r16
 784:	8f 70       	andi	r24, 0x0F	; 15
tempDecimal = (tempDecimal<<1) + (tempDecimal<<3);
 786:	f8 2e       	mov	r15, r24
 788:	ff 0c       	add	r15, r15
 78a:	88 0f       	add	r24, r24
 78c:	88 0f       	add	r24, r24
 78e:	88 0f       	add	r24, r24
 790:	f8 0e       	add	r15, r24
tempDigital = temp >> 4;
 792:	84 e0       	ldi	r24, 0x04	; 4
 794:	16 95       	lsr	r17
 796:	07 95       	ror	r16
 798:	8a 95       	dec	r24
 79a:	e1 f7       	brne	.-8      	; 0x794 <__vector_6+0x2cc>
 79c:	4a e0       	ldi	r20, 0x0A	; 10
 79e:	be 01       	movw	r22, r28
 7a0:	6f 5f       	subi	r22, 0xFF	; 255
 7a2:	7f 4f       	sbci	r23, 0xFF	; 255
 7a4:	80 2f       	mov	r24, r16
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	0e 94 9b 05 	call	0xb36	; 0xb36 <__utoa_ncheck>
tempDecimal = (tempDecimal>>4);
LCD_WriteStr( utoa(tempDigital,Sbuf,10) );
 7ac:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_WriteStr>
LCD_WriteLetter('.');
 7b0:	8e e2       	ldi	r24, 0x2E	; 46
 7b2:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_WriteLetter>
tempDecimal = (tempDecimal>>4);
 7b6:	f2 94       	swap	r15
 7b8:	9f e0       	ldi	r25, 0x0F	; 15
 7ba:	f9 22       	and	r15, r25
 7bc:	4a e0       	ldi	r20, 0x0A	; 10
 7be:	be 01       	movw	r22, r28
 7c0:	6f 5f       	subi	r22, 0xFF	; 255
 7c2:	7f 4f       	sbci	r23, 0xFF	; 255
 7c4:	8f 2d       	mov	r24, r15
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	0e 94 9b 05 	call	0xb36	; 0xb36 <__utoa_ncheck>
LCD_WriteStr( utoa(tempDecimal,Sbuf,10) );
 7cc:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_WriteStr>
LCD_WriteLetter('*');
 7d0:	8a e2       	ldi	r24, 0x2A	; 42
 7d2:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_WriteLetter>
LCD_WriteLetter('C');
 7d6:	83 e4       	ldi	r24, 0x43	; 67
 7d8:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_WriteLetter>


}
if(OneWireReset(OW2) ) 
 7dc:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <OW2>
 7e0:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <OW2+0x1>
 7e4:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <OW2+0x2>
 7e8:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <OW2+0x3>
 7ec:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <OW2+0x4>
 7f0:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <OW2+0x5>
 7f4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <OW2+0x6>
 7f8:	0e 94 16 01 	call	0x22c	; 0x22c <OneWireReset>
 7fc:	88 23       	and	r24, r24
 7fe:	09 f4       	brne	.+2      	; 0x802 <__vector_6+0x33a>
 800:	44 c0       	rjmp	.+136    	; 0x88a <__vector_6+0x3c2>
{

OneWireWriteByte(OW2, SKIP_ROM);
 802:	0c ec       	ldi	r16, 0xCC	; 204
 804:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <OW2>
 808:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <OW2+0x1>
 80c:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <OW2+0x2>
 810:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <OW2+0x3>
 814:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <OW2+0x4>
 818:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <OW2+0x5>
 81c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <OW2+0x6>
 820:	0e 94 35 02 	call	0x46a	; 0x46a <OneWireWriteByte>

OneWireWriteByte(OW2, CONVERT_TEMP);
 824:	04 e4       	ldi	r16, 0x44	; 68
 826:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <OW2>
 82a:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <OW2+0x1>
 82e:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <OW2+0x2>
 832:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <OW2+0x3>
 836:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <OW2+0x4>
 83a:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <OW2+0x5>
 83e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <OW2+0x6>
 842:	0e 94 35 02 	call	0x46a	; 0x46a <OneWireWriteByte>
{
LCD_GoToYX(1,1);
LCD_WriteStr("1-Ware = Error");
}

}
 846:	0f 90       	pop	r0
 848:	0f 90       	pop	r0
 84a:	0f 90       	pop	r0
 84c:	0f 90       	pop	r0
 84e:	df 91       	pop	r29
 850:	cf 91       	pop	r28
 852:	ff 91       	pop	r31
 854:	ef 91       	pop	r30
 856:	bf 91       	pop	r27
 858:	af 91       	pop	r26
 85a:	9f 91       	pop	r25
 85c:	8f 91       	pop	r24
 85e:	7f 91       	pop	r23
 860:	6f 91       	pop	r22
 862:	5f 91       	pop	r21
 864:	4f 91       	pop	r20
 866:	3f 91       	pop	r19
 868:	2f 91       	pop	r18
 86a:	1f 91       	pop	r17
 86c:	0f 91       	pop	r16
 86e:	ff 90       	pop	r15
 870:	0f 90       	pop	r0
 872:	0f be       	out	0x3f, r0	; 63
 874:	0f 90       	pop	r0
 876:	1f 90       	pop	r1
 878:	18 95       	reti
 87a:	80 e8       	ldi	r24, 0x80	; 128
 87c:	0e 94 93 00 	call	0x126	; 0x126 <LCD_WriteCommand>
LCD_WriteStr("1-Ware = Error");
 880:	80 e7       	ldi	r24, 0x70	; 112
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_WriteStr>
 888:	10 cf       	rjmp	.-480    	; 0x6aa <__vector_6+0x1e2>
 88a:	80 e8       	ldi	r24, 0x80	; 128
 88c:	0e 94 93 00 	call	0x126	; 0x126 <LCD_WriteCommand>
LCD_WriteStr("1-Ware = Error");
 890:	80 e7       	ldi	r24, 0x70	; 112
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_WriteStr>
}
 898:	d6 cf       	rjmp	.-84     	; 0x846 <__vector_6+0x37e>

0000089a <WriteBufOUT>:
void WriteBufOUT(unsigned char value)
{	
	if (write != 1)
 89a:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <__data_end>
 89e:	91 30       	cpi	r25, 0x01	; 1
 8a0:	59 f0       	breq	.+22     	; 0x8b8 <WriteBufOUT+0x1e>
	{
           	 	BufferOUT[EndBufOUT++] = value;
 8a2:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <EndBufOUT>
 8a6:	e9 2f       	mov	r30, r25
 8a8:	f0 e0       	ldi	r31, 0x00	; 0
 8aa:	e2 57       	subi	r30, 0x72	; 114
 8ac:	ff 4f       	sbci	r31, 0xFF	; 255
 8ae:	80 83       	st	Z, r24
 8b0:	9f 5f       	subi	r25, 0xFF	; 255
            		EndBufOUT &= BUF_MASK;
 8b2:	93 70       	andi	r25, 0x03	; 3
 8b4:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <EndBufOUT>
	}
}
 8b8:	08 95       	ret

000008ba <__vector_11>:



ISR(USART_RXC_vect)                   
{ 
 8ba:	1f 92       	push	r1
 8bc:	0f 92       	push	r0
 8be:	0f b6       	in	r0, 0x3f	; 63
 8c0:	0f 92       	push	r0
 8c2:	11 24       	eor	r1, r1
 8c4:	2f 93       	push	r18
 8c6:	3f 93       	push	r19
 8c8:	4f 93       	push	r20
 8ca:	5f 93       	push	r21
 8cc:	6f 93       	push	r22
 8ce:	7f 93       	push	r23
 8d0:	8f 93       	push	r24
 8d2:	9f 93       	push	r25
 8d4:	af 93       	push	r26
 8d6:	bf 93       	push	r27
 8d8:	ef 93       	push	r30
 8da:	ff 93       	push	r31
             if (UDR == address)
 8dc:	9c b1       	in	r25, 0x0c	; 12
 8de:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <address>
 8e2:	98 13       	cpse	r25, r24
 8e4:	15 c0       	rjmp	.+42     	; 0x910 <__vector_11+0x56>
			 {
			 	WriteBufOUT(Memory[0]);
 8e6:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <Memory>
 8ea:	0e 94 4d 04 	call	0x89a	; 0x89a <WriteBufOUT>
				WriteBufOUT(Memory[1]);
 8ee:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <Memory+0x1>
 8f2:	0e 94 4d 04 	call	0x89a	; 0x89a <WriteBufOUT>
				WriteBufOUT(Memory[2]);
 8f6:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <Memory+0x2>
 8fa:	0e 94 4d 04 	call	0x89a	; 0x89a <WriteBufOUT>
				WriteBufOUT(Memory[3]);
 8fe:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <Memory+0x3>
 902:	0e 94 4d 04 	call	0x89a	; 0x89a <WriteBufOUT>
			 	UCSRA &= ~(1<<MPCM);
 906:	58 98       	cbi	0x0b, 0	; 11
			 	UCSRB |= 1<<UDRIE;
 908:	55 9a       	sbi	0x0a, 5	; 10
				write = 1;
 90a:	81 e0       	ldi	r24, 0x01	; 1
 90c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_end>
			 }                         
}
 910:	ff 91       	pop	r31
 912:	ef 91       	pop	r30
 914:	bf 91       	pop	r27
 916:	af 91       	pop	r26
 918:	9f 91       	pop	r25
 91a:	8f 91       	pop	r24
 91c:	7f 91       	pop	r23
 91e:	6f 91       	pop	r22
 920:	5f 91       	pop	r21
 922:	4f 91       	pop	r20
 924:	3f 91       	pop	r19
 926:	2f 91       	pop	r18
 928:	0f 90       	pop	r0
 92a:	0f be       	out	0x3f, r0	; 63
 92c:	0f 90       	pop	r0
 92e:	1f 90       	pop	r1
 930:	18 95       	reti

00000932 <__vector_13>:

ISR(USART_TXC_vect )                  
{
 932:	1f 92       	push	r1
 934:	0f 92       	push	r0
 936:	0f b6       	in	r0, 0x3f	; 63
 938:	0f 92       	push	r0
 93a:	11 24       	eor	r1, r1
 93c:	8f 93       	push	r24
 93e:	9f 93       	push	r25
if( StartBufOUT == EndBufOUT )
 940:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <StartBufOUT>
 944:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <EndBufOUT>
 948:	98 13       	cpse	r25, r24
 94a:	01 c0       	rjmp	.+2      	; 0x94e <__vector_13+0x1c>
PORTD &= ~(1<<PD2);
 94c:	92 98       	cbi	0x12, 2	; 18
 }             
 94e:	9f 91       	pop	r25
 950:	8f 91       	pop	r24
 952:	0f 90       	pop	r0
 954:	0f be       	out	0x3f, r0	; 63
 956:	0f 90       	pop	r0
 958:	1f 90       	pop	r1
 95a:	18 95       	reti

0000095c <__vector_12>:

ISR(USART_UDRE_vect )               
{
 95c:	1f 92       	push	r1
 95e:	0f 92       	push	r0
 960:	0f b6       	in	r0, 0x3f	; 63
 962:	0f 92       	push	r0
 964:	11 24       	eor	r1, r1
 966:	8f 93       	push	r24
 968:	9f 93       	push	r25
 96a:	ef 93       	push	r30
 96c:	ff 93       	push	r31
             PORTD |= 1<<PD2;       
 96e:	92 9a       	sbi	0x12, 2	; 18
             asm("nop");
 970:	00 00       	nop
             UDR = BufferOUT[StartBufOUT++];
 972:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <StartBufOUT>
 976:	81 e0       	ldi	r24, 0x01	; 1
 978:	8e 0f       	add	r24, r30
 97a:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <StartBufOUT>
 97e:	f0 e0       	ldi	r31, 0x00	; 0
 980:	e2 57       	subi	r30, 0x72	; 114
 982:	ff 4f       	sbci	r31, 0xFF	; 255
 984:	80 81       	ld	r24, Z
 986:	8c b9       	out	0x0c, r24	; 12
             StartBufOUT &= BUF_MASK;
 988:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <StartBufOUT>
 98c:	83 70       	andi	r24, 0x03	; 3
 98e:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <StartBufOUT>
             if( StartBufOUT == EndBufOUT )
 992:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <EndBufOUT>
 996:	89 13       	cpse	r24, r25
 998:	04 c0       	rjmp	.+8      	; 0x9a2 <__vector_12+0x46>
	{
              UCSRB &= ~(1<<UDRIE);
 99a:	55 98       	cbi	0x0a, 5	; 10
	          UCSRA |= (1<<MPCM);
 99c:	58 9a       	sbi	0x0b, 0	; 11
	          write=0;
 99e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__data_end>
	 }
}
 9a2:	ff 91       	pop	r31
 9a4:	ef 91       	pop	r30
 9a6:	9f 91       	pop	r25
 9a8:	8f 91       	pop	r24
 9aa:	0f 90       	pop	r0
 9ac:	0f be       	out	0x3f, r0	; 63
 9ae:	0f 90       	pop	r0
 9b0:	1f 90       	pop	r1
 9b2:	18 95       	reti

000009b4 <Initializer>:
}
//---------------------------------------------------------------------------
void Initializer() 
{

DDRA = 0xFF;
 9b4:	8f ef       	ldi	r24, 0xFF	; 255
 9b6:	8a bb       	out	0x1a, r24	; 26
PORTA = 0x00;
 9b8:	1b ba       	out	0x1b, r1	; 27

port_ini();
 9ba:	0e 94 49 00 	call	0x92	; 0x92 <port_ini>
lcd_ini();
 9be:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_ini>
OCR1A = 0x7A11;
 9c2:	81 e1       	ldi	r24, 0x11	; 17
 9c4:	9a e7       	ldi	r25, 0x7A	; 122
 9c6:	9b bd       	out	0x2b, r25	; 43
 9c8:	8a bd       	out	0x2a, r24	; 42
TCCR1A = 0x00;
 9ca:	1f bc       	out	0x2f, r1	; 47
TCCR1B = 1<<WGM12 | 1<<CS01 | 1<<CS00;
 9cc:	8b e0       	ldi	r24, 0x0B	; 11
 9ce:	8e bd       	out	0x2e, r24	; 46

TIMSK |= 1<<OCIE1A;
 9d0:	89 b7       	in	r24, 0x39	; 57
 9d2:	80 61       	ori	r24, 0x10	; 16
 9d4:	89 bf       	out	0x39, r24	; 57

OneWireInit(OW1);
 9d6:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <OW1>
 9da:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <OW1+0x1>
 9de:	40 91 6b 00 	lds	r20, 0x006B	; 0x80006b <OW1+0x2>
 9e2:	50 91 6c 00 	lds	r21, 0x006C	; 0x80006c <OW1+0x3>
 9e6:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <OW1+0x4>
 9ea:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <OW1+0x5>
 9ee:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <OW1+0x6>
 9f2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <OneWireInit>
OneWireInit(OW2);
 9f6:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <OW2>
 9fa:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <OW2+0x1>
 9fe:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <OW2+0x2>
 a02:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <OW2+0x3>
 a06:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <OW2+0x4>
 a0a:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <OW2+0x5>
 a0e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <OW2+0x6>
 a12:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <OneWireInit>

00000a16 <main>:
Initializer();
 a16:	0e 94 da 04 	call	0x9b4	; 0x9b4 <Initializer>
if(OneWireReset(OW1) )
 a1a:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <OW1>
 a1e:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <OW1+0x1>
 a22:	40 91 6b 00 	lds	r20, 0x006B	; 0x80006b <OW1+0x2>
 a26:	50 91 6c 00 	lds	r21, 0x006C	; 0x80006c <OW1+0x3>
 a2a:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <OW1+0x4>
 a2e:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <OW1+0x5>
 a32:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <OW1+0x6>
 a36:	0e 94 16 01 	call	0x22c	; 0x22c <OneWireReset>
 a3a:	88 23       	and	r24, r24
 a3c:	09 f4       	brne	.+2      	; 0xa40 <main+0x2a>
 a3e:	6b c0       	rjmp	.+214    	; 0xb16 <main+0x100>
OneWireWriteByte(OW1, SKIP_ROM);
 a40:	0c ec       	ldi	r16, 0xCC	; 204
 a42:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <OW1>
 a46:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <OW1+0x1>
 a4a:	40 91 6b 00 	lds	r20, 0x006B	; 0x80006b <OW1+0x2>
 a4e:	50 91 6c 00 	lds	r21, 0x006C	; 0x80006c <OW1+0x3>
 a52:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <OW1+0x4>
 a56:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <OW1+0x5>
 a5a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <OW1+0x6>
 a5e:	0e 94 35 02 	call	0x46a	; 0x46a <OneWireWriteByte>
OneWireWriteByte(OW1, CONVERT_TEMP);
 a62:	04 e4       	ldi	r16, 0x44	; 68
 a64:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <OW1>
 a68:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <OW1+0x1>
 a6c:	40 91 6b 00 	lds	r20, 0x006B	; 0x80006b <OW1+0x2>
 a70:	50 91 6c 00 	lds	r21, 0x006C	; 0x80006c <OW1+0x3>
 a74:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <OW1+0x4>
 a78:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <OW1+0x5>
 a7c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <OW1+0x6>
 a80:	0e 94 35 02 	call	0x46a	; 0x46a <OneWireWriteByte>
 a84:	2f e3       	ldi	r18, 0x3F	; 63
 a86:	8d e0       	ldi	r24, 0x0D	; 13
 a88:	93 e0       	ldi	r25, 0x03	; 3
 a8a:	21 50       	subi	r18, 0x01	; 1
 a8c:	80 40       	sbci	r24, 0x00	; 0
 a8e:	90 40       	sbci	r25, 0x00	; 0
 a90:	e1 f7       	brne	.-8      	; 0xa8a <main+0x74>
 a92:	00 c0       	rjmp	.+0      	; 0xa94 <main+0x7e>
 a94:	00 00       	nop
sei();
 a96:	78 94       	sei
if(OneWireReset(OW2) )
 a98:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <OW2>
 a9c:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <OW2+0x1>
 aa0:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <OW2+0x2>
 aa4:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <OW2+0x3>
 aa8:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <OW2+0x4>
 aac:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <OW2+0x5>
 ab0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <OW2+0x6>
 ab4:	0e 94 16 01 	call	0x22c	; 0x22c <OneWireReset>
 ab8:	88 23       	and	r24, r24
 aba:	a9 f1       	breq	.+106    	; 0xb26 <main+0x110>
OneWireWriteByte(OW2, SKIP_ROM);
 abc:	0c ec       	ldi	r16, 0xCC	; 204
 abe:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <OW2>
 ac2:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <OW2+0x1>
 ac6:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <OW2+0x2>
 aca:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <OW2+0x3>
 ace:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <OW2+0x4>
 ad2:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <OW2+0x5>
 ad6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <OW2+0x6>
 ada:	0e 94 35 02 	call	0x46a	; 0x46a <OneWireWriteByte>
OneWireWriteByte(OW2, CONVERT_TEMP);
 ade:	04 e4       	ldi	r16, 0x44	; 68
 ae0:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <OW2>
 ae4:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <OW2+0x1>
 ae8:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <OW2+0x2>
 aec:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <OW2+0x3>
 af0:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <OW2+0x4>
 af4:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <OW2+0x5>
 af8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <OW2+0x6>
 afc:	0e 94 35 02 	call	0x46a	; 0x46a <OneWireWriteByte>
 b00:	2f e3       	ldi	r18, 0x3F	; 63
 b02:	8d e0       	ldi	r24, 0x0D	; 13
 b04:	93 e0       	ldi	r25, 0x03	; 3
 b06:	21 50       	subi	r18, 0x01	; 1
 b08:	80 40       	sbci	r24, 0x00	; 0
 b0a:	90 40       	sbci	r25, 0x00	; 0
 b0c:	e1 f7       	brne	.-8      	; 0xb06 <main+0xf0>
 b0e:	00 c0       	rjmp	.+0      	; 0xb10 <main+0xfa>
 b10:	00 00       	nop
sei();
 b12:	78 94       	sei
 b14:	ff cf       	rjmp	.-2      	; 0xb14 <main+0xfe>
 b16:	80 e8       	ldi	r24, 0x80	; 128
 b18:	0e 94 93 00 	call	0x126	; 0x126 <LCD_WriteCommand>
LCD_WriteStr("1-Ware = Error");
 b1c:	80 e7       	ldi	r24, 0x70	; 112
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_WriteStr>
 b24:	af cf       	rjmp	.-162    	; 0xa84 <main+0x6e>
 b26:	80 e8       	ldi	r24, 0x80	; 128
 b28:	0e 94 93 00 	call	0x126	; 0x126 <LCD_WriteCommand>
LCD_WriteStr("1-Ware = Error");
 b2c:	80 e7       	ldi	r24, 0x70	; 112
 b2e:	90 e0       	ldi	r25, 0x00	; 0
 b30:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_WriteStr>
 b34:	e5 cf       	rjmp	.-54     	; 0xb00 <main+0xea>

00000b36 <__utoa_ncheck>:
 b36:	bb 27       	eor	r27, r27

00000b38 <__utoa_common>:
 b38:	fb 01       	movw	r30, r22
 b3a:	55 27       	eor	r21, r21
 b3c:	aa 27       	eor	r26, r26
 b3e:	88 0f       	add	r24, r24
 b40:	99 1f       	adc	r25, r25
 b42:	aa 1f       	adc	r26, r26
 b44:	a4 17       	cp	r26, r20
 b46:	10 f0       	brcs	.+4      	; 0xb4c <__utoa_common+0x14>
 b48:	a4 1b       	sub	r26, r20
 b4a:	83 95       	inc	r24
 b4c:	50 51       	subi	r21, 0x10	; 16
 b4e:	b9 f7       	brne	.-18     	; 0xb3e <__utoa_common+0x6>
 b50:	a0 5d       	subi	r26, 0xD0	; 208
 b52:	aa 33       	cpi	r26, 0x3A	; 58
 b54:	08 f0       	brcs	.+2      	; 0xb58 <__utoa_common+0x20>
 b56:	a9 5d       	subi	r26, 0xD9	; 217
 b58:	a1 93       	st	Z+, r26
 b5a:	00 97       	sbiw	r24, 0x00	; 0
 b5c:	79 f7       	brne	.-34     	; 0xb3c <__utoa_common+0x4>
 b5e:	b1 11       	cpse	r27, r1
 b60:	b1 93       	st	Z+, r27
 b62:	11 92       	st	Z+, r1
 b64:	cb 01       	movw	r24, r22
 b66:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <strrev>

00000b6a <strrev>:
 b6a:	dc 01       	movw	r26, r24
 b6c:	fc 01       	movw	r30, r24
 b6e:	67 2f       	mov	r22, r23
 b70:	71 91       	ld	r23, Z+
 b72:	77 23       	and	r23, r23
 b74:	e1 f7       	brne	.-8      	; 0xb6e <strrev+0x4>
 b76:	32 97       	sbiw	r30, 0x02	; 2
 b78:	04 c0       	rjmp	.+8      	; 0xb82 <strrev+0x18>
 b7a:	7c 91       	ld	r23, X
 b7c:	6d 93       	st	X+, r22
 b7e:	70 83       	st	Z, r23
 b80:	62 91       	ld	r22, -Z
 b82:	ae 17       	cp	r26, r30
 b84:	bf 07       	cpc	r27, r31
 b86:	c8 f3       	brcs	.-14     	; 0xb7a <strrev+0x10>
 b88:	08 95       	ret

00000b8a <_exit>:
 b8a:	f8 94       	cli

00000b8c <__stop_program>:
 b8c:	ff cf       	rjmp	.-2      	; 0xb8c <__stop_program>
